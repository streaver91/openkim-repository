#!/usr/bin/env python
"""
Lattice constant Test Driver

Computes the lattice constant for:
1. Any element,
2. HCP crystal,
3. At 0 K, 0 GPa,
by simplex minimization.

Date: 2015/08/25
Author: Junhao Li <streaver91@gmail.com>

"""
# Import External Modules
# ASE Modules
try:
    from ase.lattice import bulk
    print 'Imported bulk from ase.lattice' # For ASE version 3.9
except ImportError:
    from ase.structure import bulk
    print 'Imported bulk from ase.structure' # For ASE version <= 3.8
from ase.optimize import FIRE
from ase.data import chemical_symbols
from ase.data import reference_states

# KIM Modules
from kimcalculator import *
from kimservice import KIM_API_get_data_double

# Other Python Modules
import sys
import re
import json
import math
import simplejson
import jinja2
import os
import fileinput
import copy
import numpy as np
from scipy.optimize import fmin
from collections import OrderedDict

def getModelInfo(model, elem):
    # Obtain cutoff and nbcname from model
    calc = KIMCalculator(model)
    atoms = bulk(elem, 'hcp', a = 1)
    atoms.set_calculator(calc)
    cutoff = KIM_API_get_data_double(calc.pkim, 'cutoff')[0]
    nbcname = calc.get_NBC_method()
    return cutoff, nbcname

def getEnergy(cellVector, atoms):
    # Obtain Cohesive tmpCell Corresponds to cellVector
    # Construct tmpAtoms based on the length of cellVector
    if len(cellVector) == 2:
        tmpAtoms = bulk('X', a = cellVector[0], c = cellVector[1], crystalstructure = 'hcp')
    else:
        tmpAtoms = bulk('X', a = cellVector[0], crystalstructure = 'hcp')
    tmpCell = tmpAtoms.get_cell()
    # Scale positions of atoms and obtain energy
    atoms.set_cell(tmpCell, scale_atoms = True)
    energy = atoms.get_potential_energy()
    return energy

def main():
    # Input Parameters
    # elem = raw_input('Element = ')
    # lattice = raw_input('Lattice = ')
    # model = raw_input('Model = ')
    
    # Parameters for Debugging
    # elem = 'Co'
    # lattice = 'hcp'
    # model = 'EAM_Dynamo_PurjaPun_Mishin_Co__MO_885079680379_001'

    # elem = 'Ni'
    # lattice = 'hcp'
    # model = 'EAM_Dynamo_Ackland_Tichy_Ni__MO_977363131043_001'
    
    # elem = 'Si'
    # lattice = 'hcp'
    # model = 'Three_Body_Stillinger_Weber_Balamane_Si__MO_113686039439_001'

    # elem = 'Cu'
    # lattice = 'hcp'
    # model = 'EAM_Dynamo_Ackland_Tichy_Cu__MO_179025990738_001'
    
    elem = 'Al'
    lattice = 'hcp'
    model = 'EAM_Dynamo_Ercolessi_Adams_Al__MO_123629422045_001'
    model = 'EAM_Dynamo_Mendelev_Kramer_Al__MO_106969701023_001'
    model = 'EAM_Dynamo_Mishin_Farkas_Al__MO_651801486679_001'
    model = 'EAM_Dynamo_Sturgeon_Laird_Al__MO_120808805541_001' # Not Succeeded
    # model = 'EAM_Dynamo_Winey_Kubota_Al__MO_149316865608_001'
    # model = 'EAM_Dynamo_Zhou_Johnson_Al__MO_131650261510_001'
    # model = 'EAM_Dynamo_Zope_Mishin_Al__MO_664470114311_001'
    # model = 'Glue_Ercolessi_Adams_Al__MO_324507536345_001'  # Not Succeeded
    # model = 'Pair_Morse_Shifted_GirifalcoWeizer_HighCutoff_Al__MO_140175748626_001'
    # model = 'Pair_Morse_Shifted_GirifalcoWeizer_LowCutoff_Al__MO_411898953661_001'
    # model = 'Pair_Morse_Shifted_GirifalcoWeizer_MedCutoff_Al__MO_279544746097_001'
    
    # elem = 'C'
    # lattice = 'hcp'
    # model = 'EAM_Dynamo_Hepburn_Ackland_FeC__MO_143977152728_001'
    # model = 'MEAM_2NN_Fe_to_Ga__MO_145522277939_001'
    # model = 'model_ArCHHeXe_BOP_AIREBO__MO_154399806462_001'
    # model = 'Tersoff_LAMMPS_Erhart_Albe_CSi__MO_903987585848_001'
    
    # Print Inputs
    print 'Element:', elem
    print 'Lattice:', lattice # Not used here
    print 'Model:', model
    
    # Environment Setup
    calc = KIMCalculator(model)
    atoms = bulk(elem, 'hcp', a = 1)
    atoms.set_calculator(calc)
    cutoff = KIM_API_get_data_double(calc.pkim, 'cutoff')[0]
    
    # Calculate Potential Energy
    z = []
    x = [x * 0.01 * cutoff for x in range(10, 90)]
    y = [y * 0.01 * cutoff for y in range(15, 90)]
    for a in x:
        print 'Current a:', a
        row = []
        for c in y:
            energy = getEnergy([a, c], atoms)
            row.append(energy)
        z.append(row)
    
    plotData = {
        'x': x,
        'y': y,
        'z': z,
    }
    
    # Output JSON
    plotDataString = json.dumps(plotData)
    with open(os.path.abspath('output/' + model + '_ca.json'), 'w') as f:
        f.write(plotDataString)
    

if __name__ == '__main__':
    main()
