#!/usr/bin/env python
"""
Vacancy Migration Energy (VME) and Formation Energy (VFE) Test Driver
Works for Both Cubic and HCP Crystals, at 0 K and 0 GPa

This test driver first calculates VFE and VME of several fixed size supercells,
then extrapolates these results to obtain the dilute limit. VME is calculated
with nudged elastic band method.

2016-04-06 Junhao Li <streaver91@gmail.com>
* change the output format to conform with the new property definition.
* add the calculation of relaxation volume and elastic multipoles.
* change the version number to 001

Author: Junhao Li <streaver91@gmail.com>
"""
# Python Modules
import sys
import re
import json
import os
import re

# Vacancy Driver Modules
import config as C
import functions as F
from vacancy import Vacancy

# Generate OrderedDict for all properties to report
def packResult(res):
    print '[Packing results]'
    instanceId = 1 # Instance id start from 1
    driverPath = os.path.dirname(os.path.abspath(__file__))
    instances = []
    for pd in C.PROPERTY_DEFINITIONS:
        F.clock('packing results for: ' + pd)
        instance = {
            'instance-id': instanceId
        }
        with open(driverPath + ('/definitions/%s.edn' % pd), 'r') as f:
            content = f.read()
            tmp = re.search('property-id\" \"([^\"]+)\"', content, re.M)
            propertyId = tmp.group(1)
            instance['property-id'] = propertyId
            tmp = re.findall('\"([^\"]+)\" \{', content)
            for prop in tmp:
                propValKey = prop # Alias name in res
                if prop[:5] == 'host-':
                    propValKey = prop[5:]
                elif prop[:10] == 'reservoir-':
                    propValKey = prop[10:]
                if propAlias in res:
                    instance[prop] = res[propValKey]
        print instance
        instances.append(instance)
        instanceId += 1
    return instances

def main():
    # Obtain raw inputs
    elem = raw_input()
    lattice = raw_input()
    model = raw_input()
    latticeConstA = raw_input()
    latticeConstC = raw_input()

    # If it's hcp crystal, process both a and c
    # Otherwise, process a only
    if lattice == 'hcp':
        latticeConsts = [float(latticeConstA), float(latticeConstC)]
    else:
        latticeConsts = [float(latticeConstA)] # Ignore latticeConstC

    # Create Instance
    migration = [1.0, 0.0, 0.0]
    vacancy = Vacancy(elem, model, lattice, latticeConsts, migration)

    # Obtain Results and pack into OrderedDict
    vacancy.run()

    res = vacancy.getResult()
    instances = packResult(res)

    # Output results
    insEdn = json.dumps(instances, separators = (' ',' '), indent = 2)
    with open(os.path.abspath('output/results.edn'), 'w') as f:
        f.write(insEdn)
    insJson = json.dumps(instances, indent = 2)
    with open(os.path.abspath('output/results.json'), 'w') as f:
        f.write(insJson)

if __name__ == '__main__':
    main()
