"""
Read in force and position calculated by PURE
Compare them with forces generated by MIOPBC

Date: 2015/09/12
Author: Junhao Li
"""
# ----
# Import Modules
# ----
# ASE
import ase
from ase import Atoms
from ase.lattice import bulk

# KIM
from kimcalculator import KIMCalculator
import kimservice as km

# Others
import numpy as np
from scipy import optimize
import ctypes
import os
from copy import copy
import sys
import math
import random

# ----
# Configs
# ----
LATTICE = 'diamond'
ELEM = 'Si'
MODEL_DIR = '/home/openkim/openkim-repository/mo'
MODEL = 'EDIP_BOP_Bazant_Kaxiras_Si__MO_958932894036_001'
INPUT_FILE = 'forces.txt'
OUTPUT_FILE = 'forceComparison.txt'
PARAMS_FILE = 'originalParams.txt.txt'  # file with original parameters

output = []

# Obtain name of the parameters from the model file
# Note: the first parameter cutoff is not dropped
def getParamNames():
    paramNames = []
    desFile = os.path.join(MODEL_DIR, MODEL, 'descriptor.kim')
    with open(desFile, 'r') as f:
        for line in f:
            if 'PARAM_FREE' in line:
                paramName = line.split()[0]
                paramNames.append(paramName)
    del paramNames[0]  # drop cutoff
    return paramNames

def readData():
    # Read Data in Format:
    # energy (eV)
    # cellSize (angstrom)
    # x y z Fx Fy Fz
    # ...
    positions = []
    forces = []
    energy = 0
    cellSize = 0
    with open(INPUT_FILE, 'r') as f:
        energy = float(f.readline())
        cellSize = float(f.readline())
        for line in f:
            line = line.split()
            if len(line) == 6:
                for i in range(6):
                    line[i] = float(line[i])
                positions.append([line[0], line[1], line[2]])
                forces.append([line[3], line[4], line[5]])
    positions = np.array(positions)
    forces = np.array(forces)
    return energy, cellSize, positions, forces

def getResiduals(atoms, forces, energy):
    tmpForces = atoms.get_forces()
    nAtoms = atoms.get_number_of_atoms()
    tmpEnergy = atoms.get_potential_energy()
    
    print 'MI OPBC Results'
    print tmpForces
    print tmpEnergy
    print '----'
    
    return tmpForces - forces, (tmpEnergy - energy) / nAtoms
    
def buildAtoms(cellSize, positions):
    nAtoms = len(positions)
    atoms = Atoms(
        ELEM + str(nAtoms),
        positions = positions,
        cell = (cellSize, cellSize, cellSize),
        pbc = (1, 1, 1),
    )
    calc = KIMCalculator(MODEL)
    atoms.set_calculator(calc)
    return atoms
    
def main():
    paramNames = getParamNames()
    print paramNames

    # read forces from EDIP PURE neighbor list
    energy, cellSize, positions, forces = readData()
    atoms = buildAtoms(cellSize, positions)
    nAtoms = atoms.get_number_of_atoms()

    print 'PURE Input Data'
    print positions
    print forces
    print energy
    print '----'

    resForce, resEnergy = getResiduals(atoms, forces, energy)

    print 'Force Err:', resForce
    print 'Energy Err:', resEnergy

    print 'Max Pos Err:', np.amax(positions - atoms.get_positions())
    print 'Avg |Force Component|:', np.mean(np.abs(resForce))
    print 'Max Force Component Err:', np.amax(resForce)
    print 'Avg Force Component Err:', np.sum(resForce) / nAtoms
    print 'Median Force Component Err:', np.median(resForce)
    print 'Max % Force Component Err:', np.amax(resForce / forces * 100), '%'
    print 'Avg % Force Component Err:', np.sum(resForce / forces * 100) / nAtoms, '%'
    print 'Median % Force Component Err:', np.median(resForce / forces * 100), '%'
    print 'Cell Size:', cellSize
    print '# Atoms:', nAtoms

    # Force with large error
    resForceNorm = np.sqrt((resForce**2).sum(axis = 1))
    largeErr = resForceNorm > 1.0e-8
    # print largeErr.shape
    # print positions.shape
    # forceErr = np.sqrt((forces[largeErr]**2).sum(axis = 1)).reshape(-1, 1)
    # print forceErr.shape
    # print (positions[largeErr] - cellSize).shape
    np.set_printoptions(suppress = True)
    tmp = np.hstack([positions[largeErr], (resForceNorm.reshape(-1, 1))[largeErr]])
    # print tmp
    print 'Top Force Errs: (x, y, z, Err)'
    print tmp[(-tmp[:, 3]).argsort()]
    # print np.hstack((forceErr, forceErr))
    
    
    sys.exit(0)
    f = open('paramVals.txt', 'w')
    paramVal = np.array(paramVals[0])
    print paramVal
    output2 = []
    print paramVal.shape
    
    for i in range(paramVal.shape[0]):
        tmp = [str(i)]
        for j in range(paramVal.shape[1]):
            tmp.append(str(paramVal[i][j] / paramValOrigin[j]))
        output2.append('\t'.join(tmp))
    print output2
    f.write('\r\n'.join(output2))
    
    
main()
